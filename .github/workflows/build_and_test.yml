# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: NLPTest Python package

on:
  push:
    branches:
      - "main"

  pull_request:
    branches:
      - "release/*"
      - "main"

jobs:
  build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Hadoop
        run: |
          $hadoopUri = 'https://archive.apache.org/dist/hadoop/common/hadoop-3.2.2/hadoop-3.2.2.tar.gz'
          $winutilsUri = 'https://github.com/cdarlint/winutils/raw/master/hadoop-3.2.0/bin/winutils.exe'
          $hadoopFile = 'hadoop.tar.gz'
          $hadoopDir = 'C:\hadoop'
          mkdir($hadoopDir)
          Invoke-WebRequest -Uri $hadoopUri -OutFile $hadoopFile -UseBasicParsing
          if ((Test-Path $hadoopFile) -eq $false) {
            Write-Error "Failed to download $hadoopUri"
            exit 1
          }

          & tar.exe -xf $hadoopFile -C $hadoopDir
          if ((Test-Path $hadoopDir) -eq $false) {
            Write-Error "Failed to extract $hadoopFile to $hadoopDir"
            exit 1
          }

          Invoke-WebRequest -Uri $winutilsUri -OutFile "$hadoopDir\bin\winutils.exe" -UseBasicParsing
          if ((Test-Path "$hadoopDir\bin\winutils.exe") -eq $false) {
            Write-Error "Failed to download $winutilsUri"
            exit 1
          }

          echo "HADOOP_HOME=$hadoopDir" >> $env:GITHUB_ENV

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          # if (-f requirements.txt ); then pip install -r requirements.txt; fi
          If (Test-Path "requirements.txt") { pip install -r requirements.txt }
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with pytest
        run: |
          python -m spacy download en_core_web_sm
          pytest
